{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tatas\\\\OneDrive\\\\University\\\\Fall 2025\\\\CSCI 3428\\\\LLA\\\\src\\\\components\\\\FlipCard.js\",\n  _s = $RefreshSig$();\n/**\n * FlipCard.js\n * \n * Purpose: This component represents a flip card that displays a Mi'kmaq word with its English\n *          meaning on the front. When clicked, the card flips to reveal an associated image\n *          and plays a corresponding audio pronunciation.\n * \n * Author: Tooba Javed (A00468904)\n */\n\nimport { WORD_INFO } from \"./WordBank.js\";\nimport React, { useState, useEffect } from 'react';\nimport './FlipCard.css';\n\n/**\n * FlipCard Component\n * \n * Purpose: This component represents an interactive flip card. It displays a Mi'kmaq word with\n *          its English translation on the front. When clicked, the card flips to reveal an image\n *          and plays an audio pronunciation.\n * \n * Parameters:\n * - mikmaqWord: The Mi'kmaq word to be displayed and pronounced.\n * - englishMeaning: The English translation of the Mi'kmaq word.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FlipCard = ({\n  mikmaqWord,\n  englishMeaning\n}) => {\n  _s();\n  const [isFlipped, setIsFlipped] = useState(false); // Tracks whether the card is flipped\n\n  /**\n   * handleClick Function\n   * \n   * Purpose: Toggles the card's flipped state when clicked, showing either the front or back.\n   */\n  const handleClick = () => {\n    setIsFlipped(!isFlipped);\n  };\n\n  // Find the word data (image, audio, etc.) that matches the mikmaqWord\n  const wordData = WORD_INFO.find(item => item.text === mikmaqWord);\n\n  /**\n   * useEffect Hook\n   * \n   * Purpose: Plays the audio pronunciation whenever the card is flipped to show the back side.\n   * Dependencies: Runs whenever 'isFlipped' or 'wordImgs' changes.\n   */\n\n  useEffect(() => {\n    if (isFlipped && wordData) {\n      const audio = new Audio(wordData.audio); // Play the corresponding audio\n      audio.play();\n    }\n  }, [isFlipped, wordData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flip-card\",\n    onClick: handleClick,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `flip-card-inner ${isFlipped ? 'is-flipped' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flip-card-front\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mikmaq-text\",\n          children: mikmaqWord\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"english-text\",\n          children: [\"(\", englishMeaning, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flip-card-back\",\n        children: wordData ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: wordData.image,\n          alt: mikmaqWord,\n          className: \"flip-card-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Image missing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this) // If no image is found for the word\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(FlipCard, \"hv23zFC3a9yxuhCOuj0CoXdYyvM=\");\n_c = FlipCard;\nexport default FlipCard;\nvar _c;\n$RefreshReg$(_c, \"FlipCard\");","map":{"version":3,"names":["WORD_INFO","React","useState","useEffect","jsxDEV","_jsxDEV","FlipCard","mikmaqWord","englishMeaning","_s","isFlipped","setIsFlipped","handleClick","wordData","find","item","text","audio","Audio","play","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","src","image","alt","_c","$RefreshReg$"],"sources":["C:/Users/tatas/OneDrive/University/Fall 2025/CSCI 3428/LLA/src/components/FlipCard.js"],"sourcesContent":["/**\n * FlipCard.js\n * \n * Purpose: This component represents a flip card that displays a Mi'kmaq word with its English\n *          meaning on the front. When clicked, the card flips to reveal an associated image\n *          and plays a corresponding audio pronunciation.\n * \n * Author: Tooba Javed (A00468904)\n */\n\nimport {  WORD_INFO } from \"./WordBank.js\";\nimport React, { useState, useEffect } from 'react';\nimport './FlipCard.css';\n\n/**\n * FlipCard Component\n * \n * Purpose: This component represents an interactive flip card. It displays a Mi'kmaq word with\n *          its English translation on the front. When clicked, the card flips to reveal an image\n *          and plays an audio pronunciation.\n * \n * Parameters:\n * - mikmaqWord: The Mi'kmaq word to be displayed and pronounced.\n * - englishMeaning: The English translation of the Mi'kmaq word.\n */\nconst FlipCard = ({ mikmaqWord, englishMeaning }) => {\n  const [isFlipped, setIsFlipped] = useState(false); // Tracks whether the card is flipped\n\n  /**\n   * handleClick Function\n   * \n   * Purpose: Toggles the card's flipped state when clicked, showing either the front or back.\n   */\n  const handleClick = () => {\n    setIsFlipped(!isFlipped);\n  };\n\n  // Find the word data (image, audio, etc.) that matches the mikmaqWord\n  const wordData = WORD_INFO.find(item => item.text === mikmaqWord);\n\n  /**\n   * useEffect Hook\n   * \n   * Purpose: Plays the audio pronunciation whenever the card is flipped to show the back side.\n   * Dependencies: Runs whenever 'isFlipped' or 'wordImgs' changes.\n   */\n    \n    useEffect(() => {\n      if (isFlipped && wordData) {\n        const audio = new Audio(wordData.audio);  // Play the corresponding audio\n        audio.play();\n      }\n    }, [isFlipped, wordData]);\n\n  return (\n    <div className=\"flip-card\" onClick={handleClick}>\n      <div className={`flip-card-inner ${isFlipped ? 'is-flipped' : ''}`}>\n        {/* Front side showing the word and meaning */}\n        <div className=\"flip-card-front\">\n          <div className=\"mikmaq-text\">{mikmaqWord}</div>\n          <div className=\"english-text\">({englishMeaning})</div>\n        </div>\n        \n        {/* Back side showing the image */}\n        <div className=\"flip-card-back\">\n          {wordData ? (\n            <img src={wordData.image} alt={mikmaqWord} className=\"flip-card-image\" />\n          ) : (\n            <p>Image missing</p> // If no image is found for the word\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FlipCard;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAUA,SAAS,QAAQ,eAAe;AAC1C,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,gBAAgB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA,SAAAC,MAAA,IAAAC,OAAA;AAWA,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,UAAU;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACnD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEnD;AACF;AACA;AACA;AACA;EACE,MAAMU,WAAW,GAAGA,CAAA,KAAM;IACxBD,YAAY,CAAC,CAACD,SAAS,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMG,QAAQ,GAAGb,SAAS,CAACc,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,KAAKT,UAAU,CAAC;;EAEjE;AACF;AACA;AACA;AACA;AACA;;EAEIJ,SAAS,CAAC,MAAM;IACd,IAAIO,SAAS,IAAIG,QAAQ,EAAE;MACzB,MAAMI,KAAK,GAAG,IAAIC,KAAK,CAACL,QAAQ,CAACI,KAAK,CAAC,CAAC,CAAE;MAC1CA,KAAK,CAACE,IAAI,CAAC,CAAC;IACd;EACF,CAAC,EAAE,CAACT,SAAS,EAAEG,QAAQ,CAAC,CAAC;EAE3B,oBACER,OAAA;IAAKe,SAAS,EAAC,WAAW;IAACC,OAAO,EAAET,WAAY;IAAAU,QAAA,eAC9CjB,OAAA;MAAKe,SAAS,EAAE,mBAAmBV,SAAS,GAAG,YAAY,GAAG,EAAE,EAAG;MAAAY,QAAA,gBAEjEjB,OAAA;QAAKe,SAAS,EAAC,iBAAiB;QAAAE,QAAA,gBAC9BjB,OAAA;UAAKe,SAAS,EAAC,aAAa;UAAAE,QAAA,EAAEf;QAAU;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC/CrB,OAAA;UAAKe,SAAS,EAAC,cAAc;UAAAE,QAAA,GAAC,GAAC,EAACd,cAAc,EAAC,GAAC;QAAA;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD,CAAC,eAGNrB,OAAA;QAAKe,SAAS,EAAC,gBAAgB;QAAAE,QAAA,EAC5BT,QAAQ,gBACPR,OAAA;UAAKsB,GAAG,EAAEd,QAAQ,CAACe,KAAM;UAACC,GAAG,EAAEtB,UAAW;UAACa,SAAS,EAAC;QAAiB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAEzErB,OAAA;UAAAiB,QAAA,EAAG;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,CAAC;MACtB;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACjB,EAAA,CAjDIH,QAAQ;AAAAwB,EAAA,GAARxB,QAAQ;AAmDd,eAAeA,QAAQ;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}