{"ast":null,"code":"/**\n * FlipCard.js\n * \n * Purpose: This component represents a flip card that displays a Mi'kmaq word with its English\n *          meaning on the front. When clicked, the card flips to reveal an associated image\n *          and plays a corresponding audio pronunciation.\n * \n * Author: Tooba Javed (A00468904)\n */import{WORD_INFO}from\"./WordBank.js\";import React,{useState,useEffect}from'react';import'./FlipCard.css';/**\n * FlipCard Component\n * \n * Purpose: This component represents an interactive flip card. It displays a Mi'kmaq word with\n *          its English translation on the front. When clicked, the card flips to reveal an image\n *          and plays an audio pronunciation.\n * \n * Parameters:\n * - mikmaqWord: The Mi'kmaq word to be displayed and pronounced.\n * - englishMeaning: The English translation of the Mi'kmaq word.\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const FlipCard=_ref=>{let{mikmaqWord,englishMeaning}=_ref;const[isFlipped,setIsFlipped]=useState(false);// Tracks whether the card is flipped\n/**\n   * handleClick Function\n   * \n   * Purpose: Toggles the card's flipped state when clicked, showing either the front or back.\n   */const handleClick=()=>{setIsFlipped(!isFlipped);};// Find the word data (image, audio, etc.) that matches the mikmaqWord\nconst wordData=WORD_INFO.find(item=>item.text===mikmaqWord);/**\n   * useEffect Hook\n   * \n   * Purpose: Plays the audio pronunciation whenever the card is flipped to show the back side.\n   * Dependencies: Runs whenever 'isFlipped' or 'wordImgs' changes.\n   */useEffect(()=>{if(isFlipped&&wordData){const audio=new Audio(wordData.audio);// Play the corresponding audio\naudio.play();}},[isFlipped,wordData]);return/*#__PURE__*/_jsx(\"div\",{className:\"flip-card\",onClick:handleClick,children:/*#__PURE__*/_jsxs(\"div\",{className:`flip-card-inner ${isFlipped?'is-flipped':''}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flip-card-front\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"mikmaq-text\",children:mikmaqWord}),/*#__PURE__*/_jsxs(\"div\",{className:\"english-text\",children:[\"(\",englishMeaning,\")\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flip-card-back\",children:wordData?/*#__PURE__*/_jsx(\"img\",{src:wordData.image,alt:mikmaqWord,className:\"flip-card-image\"}):/*#__PURE__*/_jsx(\"p\",{children:\"Image missing\"})// If no image is found for the word\n})]})});};export default FlipCard;","map":{"version":3,"names":["WORD_INFO","React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","FlipCard","_ref","mikmaqWord","englishMeaning","isFlipped","setIsFlipped","handleClick","wordData","find","item","text","audio","Audio","play","className","onClick","children","src","image","alt"],"sources":["C:/Users/tatas/OneDrive/University/Fall 2025/CSCI 3428/LLA/src/components/FlipCard.js"],"sourcesContent":["/**\n * FlipCard.js\n * \n * Purpose: This component represents a flip card that displays a Mi'kmaq word with its English\n *          meaning on the front. When clicked, the card flips to reveal an associated image\n *          and plays a corresponding audio pronunciation.\n * \n * Author: Tooba Javed (A00468904)\n */\n\nimport {  WORD_INFO } from \"./WordBank.js\";\nimport React, { useState, useEffect } from 'react';\nimport './FlipCard.css';\n\n/**\n * FlipCard Component\n * \n * Purpose: This component represents an interactive flip card. It displays a Mi'kmaq word with\n *          its English translation on the front. When clicked, the card flips to reveal an image\n *          and plays an audio pronunciation.\n * \n * Parameters:\n * - mikmaqWord: The Mi'kmaq word to be displayed and pronounced.\n * - englishMeaning: The English translation of the Mi'kmaq word.\n */\nconst FlipCard = ({ mikmaqWord, englishMeaning }) => {\n  const [isFlipped, setIsFlipped] = useState(false); // Tracks whether the card is flipped\n\n  /**\n   * handleClick Function\n   * \n   * Purpose: Toggles the card's flipped state when clicked, showing either the front or back.\n   */\n  const handleClick = () => {\n    setIsFlipped(!isFlipped);\n  };\n\n  // Find the word data (image, audio, etc.) that matches the mikmaqWord\n  const wordData = WORD_INFO.find(item => item.text === mikmaqWord);\n\n  /**\n   * useEffect Hook\n   * \n   * Purpose: Plays the audio pronunciation whenever the card is flipped to show the back side.\n   * Dependencies: Runs whenever 'isFlipped' or 'wordImgs' changes.\n   */\n    \n    useEffect(() => {\n      if (isFlipped && wordData) {\n        const audio = new Audio(wordData.audio);  // Play the corresponding audio\n        audio.play();\n      }\n    }, [isFlipped, wordData]);\n\n  return (\n    <div className=\"flip-card\" onClick={handleClick}>\n      <div className={`flip-card-inner ${isFlipped ? 'is-flipped' : ''}`}>\n        {/* Front side showing the word and meaning */}\n        <div className=\"flip-card-front\">\n          <div className=\"mikmaq-text\">{mikmaqWord}</div>\n          <div className=\"english-text\">({englishMeaning})</div>\n        </div>\n        \n        {/* Back side showing the image */}\n        <div className=\"flip-card-back\">\n          {wordData ? (\n            <img src={wordData.image} alt={mikmaqWord} className=\"flip-card-image\" />\n          ) : (\n            <p>Image missing</p> // If no image is found for the word\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FlipCard;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,OAAUA,SAAS,KAAQ,eAAe,CAC1C,MAAO,CAAAC,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,gBAAgB,CAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAVA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAWA,KAAM,CAAAC,QAAQ,CAAGC,IAAA,EAAoC,IAAnC,CAAEC,UAAU,CAAEC,cAAe,CAAC,CAAAF,IAAA,CAC9C,KAAM,CAACG,SAAS,CAAEC,YAAY,CAAC,CAAGX,QAAQ,CAAC,KAAK,CAAC,CAAE;AAEnD;AACF;AACA;AACA;AACA,KACE,KAAM,CAAAY,WAAW,CAAGA,CAAA,GAAM,CACxBD,YAAY,CAAC,CAACD,SAAS,CAAC,CAC1B,CAAC,CAED;AACA,KAAM,CAAAG,QAAQ,CAAGf,SAAS,CAACgB,IAAI,CAACC,IAAI,EAAIA,IAAI,CAACC,IAAI,GAAKR,UAAU,CAAC,CAEjE;AACF;AACA;AACA;AACA;AACA,KAEIP,SAAS,CAAC,IAAM,CACd,GAAIS,SAAS,EAAIG,QAAQ,CAAE,CACzB,KAAM,CAAAI,KAAK,CAAG,GAAI,CAAAC,KAAK,CAACL,QAAQ,CAACI,KAAK,CAAC,CAAG;AAC1CA,KAAK,CAACE,IAAI,CAAC,CAAC,CACd,CACF,CAAC,CAAE,CAACT,SAAS,CAAEG,QAAQ,CAAC,CAAC,CAE3B,mBACEV,IAAA,QAAKiB,SAAS,CAAC,WAAW,CAACC,OAAO,CAAET,WAAY,CAAAU,QAAA,cAC9CjB,KAAA,QAAKe,SAAS,CAAE,mBAAmBV,SAAS,CAAG,YAAY,CAAG,EAAE,EAAG,CAAAY,QAAA,eAEjEjB,KAAA,QAAKe,SAAS,CAAC,iBAAiB,CAAAE,QAAA,eAC9BnB,IAAA,QAAKiB,SAAS,CAAC,aAAa,CAAAE,QAAA,CAAEd,UAAU,CAAM,CAAC,cAC/CH,KAAA,QAAKe,SAAS,CAAC,cAAc,CAAAE,QAAA,EAAC,GAAC,CAACb,cAAc,CAAC,GAAC,EAAK,CAAC,EACnD,CAAC,cAGNN,IAAA,QAAKiB,SAAS,CAAC,gBAAgB,CAAAE,QAAA,CAC5BT,QAAQ,cACPV,IAAA,QAAKoB,GAAG,CAAEV,QAAQ,CAACW,KAAM,CAACC,GAAG,CAAEjB,UAAW,CAACY,SAAS,CAAC,iBAAiB,CAAE,CAAC,cAEzEjB,IAAA,MAAAmB,QAAA,CAAG,eAAa,CAAG,CAAE;AACtB,CACE,CAAC,EACH,CAAC,CACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAhB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}