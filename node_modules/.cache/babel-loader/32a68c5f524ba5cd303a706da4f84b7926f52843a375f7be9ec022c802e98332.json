{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tatas\\\\OneDrive\\\\University\\\\Fall 2025\\\\CSCI 3428\\\\LLA\\\\src\\\\components\\\\GridLayout\\\\WordDistribution.jsx\",\n  _s = $RefreshSig$();\n/**\n * WordDistribution.jsx\n * \n * Purpose: Implementation of grid and question word\n *          The game dynamically updates based on the selected month, providing audio feedback\n *          and visual rewards. Users earn stars for correct matches and can reset the game.\n * \n * Author(s): Preksha Joon, Aaron Gonsalves\n * Assisted by: ChatGPT (Documentation assistance + Fixing Roadblocks)\n * \n * COTS Used:\n * - React: JavaScript library for building user interfaces. (https://reactjs.org/)\n * - Tailwind CSS: Utility-first CSS framework for styling. (https://tailwindcss.com/)\n * - Local assets for images (Michael's efforts and Microsoft Designer) and audio files.\n */\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { WORD_INFO } from \"../WordBank\";\nimport MobileView from \"./MobileView\";\nimport DesktopView from \"./DesktopView\";\nimport tryAgainAudio from \"../audio/tryagain.mp3\";\nimport congratulationsAudio from \"../audio/congratulatory.mp3\";\nimport inactivePanel from \"../images/colour.jpg\";\n\n/**\n * WordDistribution Component\n * \n * Purpose: Renders the game interface where users match words to images based on the selected month.\n * \n * Parameters:\n * - month: (number) The selected number corresponding to the month based on the words of the month, \n * which determines the set of words and game logic.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WordDistribution({\n  month\n}) {\n  _s();\n  const [callCount, setCallCount] = useState(0);\n  const [boxes, setBoxes] = useState([]);\n  const [initWords, setInitWords] = useState([]);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [displayText, setDisplayText] = useState(\"\");\n  const [displayAudio, setDisplayAudio] = useState(\"\");\n  const [displayImage, setDisplayImage] = useState(\"\");\n  const [roundDisplay, setRoundDisplay] = useState(callCount + \"/\" + month);\n  const [successCount, setSuccessCount] = useState(0);\n  const [gameEnd, setGameEnd] = useState(false);\n\n  /**\n   * gameOver\n   * \n   * Purpose: Determines if the game has ended based on the number of rounds played.\n   */\n  const GameOver = useCallback(() => {\n    if (month < 9) {\n      if (month === 3 && callCount === 3 || month === 6 && callCount === 6) {\n        setGameEnd(true);\n      }\n    } else {\n      if (callCount === month) setGameEnd(true);\n    }\n  }, [month, callCount]);\n\n  /**\n   * generateWordArray\n   * \n   * Purpose: Generates a new word array for the grid, shuffling words and preparing the game state for the next round. \n   * Also, selects the question word for each round, and updates it on display.\n   */\n  const GenerateWordArray = useCallback(() => {\n    if (!initWords || initWords.length === 0) return;\n    GameOver();\n    const currentIndex = callCount % initWords.length;\n    const fixedWord = initWords[currentIndex];\n    const fixedTextValue = fixedWord.text;\n    const fixedImageValue = fixedWord.image;\n    const fixedAudioValue = fixedWord.audio;\n    let x;\n    if (month === 3) {\n      x = 6;\n    } else if (month === 6) {\n      x = 3;\n    } else {\n      x = 0;\n    }\n    const newInitWords = initWords.filter((_, index) => index !== currentIndex);\n    const shuffleWords = [...newInitWords].concat(new Array(x).fill({\n      text: \"none\",\n      image: inactivePanel,\n      audio: \"\"\n    })).sort(() => Math.random() - 0.5);\n    const remainingWords = shuffleWords.slice(0, 8);\n    const grid = [fixedWord, ...remainingWords].sort(() => Math.random() - 0.5);\n    setCallCount(prevCount => prevCount + 1);\n    setBoxes(grid);\n    setDisplayText(fixedTextValue);\n    setDisplayImage(fixedImageValue);\n    setDisplayAudio(fixedAudioValue);\n  }, [callCount, initWords, month, GameOver]);\n\n  // Purpose:Update words to be fillled in he grid  based on the month after randomizing the words, initiallize round Count\n  useEffect(() => {\n    let words = [];\n    switch (month) {\n      case 3:\n        words = WORD_INFO.slice(0, 3);\n        break;\n      case 6:\n        words = WORD_INFO.slice(0, 6);\n        break;\n      case 9:\n        words = WORD_INFO.slice(0, 9);\n        break;\n      case 12:\n        words = WORD_INFO.slice(0, 12);\n        break;\n      case 15:\n        words = WORD_INFO.slice(0, 15);\n        break;\n      case 18:\n        words = WORD_INFO.slice(0, 18);\n        break;\n      case 20:\n        words = WORD_INFO;\n        break;\n      default:\n        words = WORD_INFO.slice(0, 9);\n    }\n    const randomizeWords = [...words].sort(() => Math.random() - 0.5);\n    setCallCount(0);\n    setSuccessCount(0);\n    setInitWords(randomizeWords);\n    setIsInitialized(false);\n  }, [month]);\n\n  // Generate the initial grid and update display text after `initWords` is updated\n  useEffect(() => {\n    if (initWords.length > 0 && !isInitialized) {\n      setIsInitialized(true);\n      GenerateWordArray();\n      setRoundDisplay(callCount + \"/\" + month);\n    }\n  }, [initWords, isInitialized, GenerateWordArray, setRoundDisplay, month, callCount]);\n\n  /**\n   * HandleSelection\n   * \n   * Purpose: PBoolean to determine if the selected image corresponds to word displayed and give response accordingly. \n   * Also automatically moves to next round after display of result.\n   * \n   * paramaters\n   * selectedImages: image selected by the user\n   */\n  const HandleSelection = selectedImage => {\n    if (selectedImage === displayImage) {\n      new Audio(congratulationsAudio).play();\n      GenerateWordArray();\n      setRoundDisplay(callCount + \"/\" + month);\n      setSuccessCount(prevCount => prevCount + 1);\n    } else {\n      new Audio(tryAgainAudio).play();\n      GenerateWordArray();\n      setRoundDisplay(callCount + \"/\" + month);\n    }\n  };\n\n  /**\n   * playAudio\n   * \n   * Purpose: Plays the audio associated with the currently displayed word.\n   */\n  const PlayAudio = () => {\n    if (displayAudio) {\n      new Audio(displayAudio).play();\n    }\n  };\n\n  /**\n   * newGame\n   * \n   * Purpose: Resets the game state to start a new game.\n   */\n  const NewGame = () => {\n    setCallCount(0);\n    setSuccessCount(0);\n    const reshuffledWords = [...initWords].sort(() => Math.random() - 0.5);\n    setInitWords(reshuffledWords);\n    setIsInitialized(false);\n    setGameEnd(false);\n  };\n  /**\n   * Purpose: returns the display of the grid along with question word based on mobile or Desktop view. \n   * Also displays final score after end of a game.\n   */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MobileView, {\n      gameEnd: gameEnd,\n      successCount: successCount,\n      onNewGame: NewGame,\n      onPlayAudio: PlayAudio,\n      displayText: displayText,\n      roundDisplay: roundDisplay,\n      boxes: boxes,\n      onHandleSelection: HandleSelection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DesktopView, {\n      gameEnd: gameEnd,\n      successCount: successCount,\n      onNewGame: NewGame,\n      onPlayAudio: PlayAudio,\n      displayText: displayText,\n      roundDisplay: roundDisplay,\n      boxes: boxes,\n      onHandleSelection: HandleSelection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n}\n_s(WordDistribution, \"X5i1BR25lc9tmw2ZcrD8C51a09E=\");\n_c = WordDistribution;\nexport default WordDistribution;\nvar _c;\n$RefreshReg$(_c, \"WordDistribution\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","WORD_INFO","MobileView","DesktopView","tryAgainAudio","congratulationsAudio","inactivePanel","jsxDEV","_jsxDEV","WordDistribution","month","_s","callCount","setCallCount","boxes","setBoxes","initWords","setInitWords","isInitialized","setIsInitialized","displayText","setDisplayText","displayAudio","setDisplayAudio","displayImage","setDisplayImage","roundDisplay","setRoundDisplay","successCount","setSuccessCount","gameEnd","setGameEnd","GameOver","GenerateWordArray","length","currentIndex","fixedWord","fixedTextValue","text","fixedImageValue","image","fixedAudioValue","audio","x","newInitWords","filter","_","index","shuffleWords","concat","Array","fill","sort","Math","random","remainingWords","slice","grid","prevCount","words","randomizeWords","HandleSelection","selectedImage","Audio","play","PlayAudio","NewGame","reshuffledWords","children","onNewGame","onPlayAudio","onHandleSelection","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tatas/OneDrive/University/Fall 2025/CSCI 3428/LLA/src/components/GridLayout/WordDistribution.jsx"],"sourcesContent":["/**\n * WordDistribution.jsx\n * \n * Purpose: Implementation of grid and question word\n *          The game dynamically updates based on the selected month, providing audio feedback\n *          and visual rewards. Users earn stars for correct matches and can reset the game.\n * \n * Author(s): Preksha Joon, Aaron Gonsalves\n * Assisted by: ChatGPT (Documentation assistance + Fixing Roadblocks)\n * \n * COTS Used:\n * - React: JavaScript library for building user interfaces. (https://reactjs.org/)\n * - Tailwind CSS: Utility-first CSS framework for styling. (https://tailwindcss.com/)\n * - Local assets for images (Michael's efforts and Microsoft Designer) and audio files.\n */\n\n\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { WORD_INFO } from \"../WordBank\";\nimport MobileView from \"./MobileView\";\nimport DesktopView from \"./DesktopView\";\nimport tryAgainAudio from \"../audio/tryagain.mp3\";\nimport congratulationsAudio from \"../audio/congratulatory.mp3\";\nimport inactivePanel from \"../images/colour.jpg\";\n\n/**\n * WordDistribution Component\n * \n * Purpose: Renders the game interface where users match words to images based on the selected month.\n * \n * Parameters:\n * - month: (number) The selected number corresponding to the month based on the words of the month, \n * which determines the set of words and game logic.\n */\nfunction WordDistribution({ month }) {\n  const [callCount, setCallCount] = useState(0);\n  const [boxes, setBoxes] = useState([]);\n  const [initWords, setInitWords] = useState([]);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [displayText, setDisplayText] = useState(\"\");\n  const [displayAudio, setDisplayAudio] = useState(\"\");\n  const [displayImage, setDisplayImage] = useState(\"\");\n  const [roundDisplay, setRoundDisplay] = useState(callCount + \"/\" + month);\n  const [successCount, setSuccessCount] = useState(0);\n  const [gameEnd, setGameEnd] = useState(false);\n\n  /**\n   * gameOver\n   * \n   * Purpose: Determines if the game has ended based on the number of rounds played.\n   */\n  const GameOver = useCallback(() => {\n    if (month < 9) {\n      if ((month === 3 && callCount === 3) || (month === 6 && callCount === 6)) {\n        setGameEnd(true);\n      }\n    } else {\n      if (callCount === month) setGameEnd(true);\n    }\n  }, [month, callCount]);\n\n  /**\n   * generateWordArray\n   * \n   * Purpose: Generates a new word array for the grid, shuffling words and preparing the game state for the next round. \n   * Also, selects the question word for each round, and updates it on display.\n   */\n  const GenerateWordArray = useCallback(() => {\n    if (!initWords || initWords.length === 0) return;\n    GameOver();\n\n    const currentIndex = callCount % initWords.length;\n    const fixedWord = initWords[currentIndex];\n    const fixedTextValue = fixedWord.text;\n    const fixedImageValue = fixedWord.image;\n    const fixedAudioValue = fixedWord.audio;\n\n    let x;\n    if (month === 3) {\n      x = 6;\n    } else if (month === 6) {\n      x = 3;\n    } else {\n      x = 0;\n    }\n\n    const newInitWords = initWords.filter((_, index) => index !== currentIndex);\n    const shuffleWords = [...newInitWords]\n      .concat(\n        new Array(x).fill({\n          text: \"none\",\n          image: inactivePanel,\n          audio: \"\",\n        })\n      )\n      .sort(() => Math.random() - 0.5);\n\n    const remainingWords = shuffleWords.slice(0, 8);\n    const grid = [fixedWord, ...remainingWords].sort(() => Math.random() - 0.5);\n\n    setCallCount((prevCount) => prevCount + 1);\n    setBoxes(grid);\n    setDisplayText(fixedTextValue);\n    setDisplayImage(fixedImageValue);\n    setDisplayAudio(fixedAudioValue);\n  }, [callCount, initWords, month, GameOver]);\n\n  // Purpose:Update words to be fillled in he grid  based on the month after randomizing the words, initiallize round Count\n  useEffect(() => {\n    let words = [];\n    switch (month) {\n      case 3:\n        words = WORD_INFO.slice(0, 3);\n        break;\n      case 6:\n        words = WORD_INFO.slice(0, 6);\n        break;\n      case 9:\n        words = WORD_INFO.slice(0, 9);\n        break;\n      case 12:\n        words = WORD_INFO.slice(0, 12);\n        break;\n      case 15:\n        words = WORD_INFO.slice(0, 15);\n        break;\n      case 18:\n        words = WORD_INFO.slice(0, 18);\n        break;\n      case 20:\n        words = WORD_INFO;\n        break;\n      default:\n        words = WORD_INFO.slice(0, 9);\n    }\n    const randomizeWords = [...words].sort(() => Math.random() - 0.5);\n    setCallCount(0);\n    setSuccessCount(0);\n    setInitWords(randomizeWords);\n    setIsInitialized(false);\n  }, [month]);\n\n  // Generate the initial grid and update display text after `initWords` is updated\n  useEffect(() => {\n    if (initWords.length > 0 && !isInitialized) {\n      setIsInitialized(true);\n      GenerateWordArray();\n      setRoundDisplay(callCount  + \"/\" + month);\n    }\n  }, [initWords, isInitialized, GenerateWordArray, setRoundDisplay, month, callCount]);\n\n  /**\n   * HandleSelection\n   * \n   * Purpose: PBoolean to determine if the selected image corresponds to word displayed and give response accordingly. \n   * Also automatically moves to next round after display of result.\n   * \n   * paramaters\n   * selectedImages: image selected by the user\n   */\n  const HandleSelection = (selectedImage) => {\n    if (selectedImage === displayImage) {\n      new Audio(congratulationsAudio).play();\n      GenerateWordArray();\n      setRoundDisplay((callCount ) + \"/\" + month);\n      setSuccessCount((prevCount) => prevCount + 1);\n    } else {\n      new Audio(tryAgainAudio).play();\n      GenerateWordArray();\n      setRoundDisplay((callCount ) + \"/\" + month);\n    }\n  };\n\n  /**\n   * playAudio\n   * \n   * Purpose: Plays the audio associated with the currently displayed word.\n   */\n  const PlayAudio = () => {\n    if (displayAudio) {\n      new Audio(displayAudio).play();\n    }\n  };\n\n  /**\n   * newGame\n   * \n   * Purpose: Resets the game state to start a new game.\n   */\n  const NewGame = () => {\n    setCallCount(0);\n    setSuccessCount(0);\n    const reshuffledWords = [...initWords].sort(() => Math.random() - 0.5);\n    setInitWords(reshuffledWords);\n    setIsInitialized(false);\n    setGameEnd(false);\n  };\n/**\n * Purpose: returns the display of the grid along with question word based on mobile or Desktop view. \n * Also displays final score after end of a game.\n */\n  return (\n    <div>\n      <MobileView\n        gameEnd={gameEnd}\n        successCount={successCount}\n        onNewGame={NewGame}\n        onPlayAudio={PlayAudio}\n        displayText={displayText}\n        roundDisplay={roundDisplay}\n        boxes={boxes}\n        onHandleSelection={HandleSelection}\n      />\n      <DesktopView\n        gameEnd={gameEnd}\n        successCount={successCount}\n        onNewGame={NewGame}\n        onPlayAudio={PlayAudio}\n        displayText={displayText}\n        roundDisplay={roundDisplay}\n        boxes={boxes}\n        onHandleSelection={HandleSelection}\n      />\n    </div>\n  );\n}\n\nexport default WordDistribution;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}